/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define AL2U 7

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
    };

    macros {
        ws_find: ws_find {
            compatible = "zmk,behavior-macro";
            label = "ws_find_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
        };
        prettier: prettier {
            compatible = "zmk,behavior-macro";
            label = "prettier_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>;
        };
    };
   
    
    keymap {
         compatible = "zmk,keymap";

         AL1 {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none 
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none 
                        >;
                };
                
         AL2 {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };

         SM1 {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };
        
         SM2 {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };
                
         NUM {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };

         SYS {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };

        AL2U {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };
        };
};
