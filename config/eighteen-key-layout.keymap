/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define AL2U 7

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {

    combos {
        compatible = "zmk,combos";
         combo_sys {
            timeout-ms = <30>;
            key-positions = <3 4 5>;
            bindings = <&to SYS>;
        };
        combo_caps {
            timeout-ms = <30>;
            key-positions = <10 11 12>;
            bindings = <&caps_word>;
        };
        combo_num {
            timeout-ms = <30>;
            key-positions = <0 1 2>;
            bindings = <&to NUM>;
            layers = <AL1>;
        };
        combo_fun  {
            timeout-ms = <10>;
            key-positions = <7 8>;
            bindings = <&to FUN>;
            layers = <AL1>;
        };
        lalt {
            timeout-ms = <20>;
            key-positions = <8 9>;
            bindings = <&kp LALT>;
            layers = <SYS>;
        };
    };

    behaviors {
            hm_l: homerow_mods_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_L";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
            };
            hm_r: homerow_mods_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_R";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
            };
            sr: shift_layer {
                compatible = "zmk,behavior-hold-tap";
                label = "SHIFT_LAYER";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&to>;
                retro-tap;
            };
            hl_l: homerow_layers_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_LAYERS_L";
                #binding-cells = <2>;
                tapping-term-ms = <220>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&mo>, <&kp>;
                hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
            };
            hl_r: homerow_layers_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_LAYERS_R";
                #binding-cells = <2>;
                tapping-term-ms = <220>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&mo>, <&kp>;
                hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
            };
            td: tapdance {
                compatible = "zmk,behavior-hold-tap";
                label = "TAPDANCE";
                #binding-cells = <2>;
                tapping-term-ms = <190>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
            shrep: shift_repeat {
                    compatible = "zmk,behavior-hold-tap";
                    label = "SHIFT_REPEAT";
                    #binding-cells = <2>;
                    flavor = "hold-preferred";
                    tapping-term-ms = <400>;
                    quick-tap-ms = <200>;
                    bindings = <&kp>, <&key_repeat>;
                };
            alpha2macro: behavior_macro_1 {
                compatible = "zmk,behavior-macro";
                label = "MACRO1";
                #binding-cells = <0>;
                bindings = < &sl AL2 >;
            };
            caps_alpha2macro: behavior_macro_2 {
                compatible = "zmk,behavior-macro";
                label = "MACRO2";
                #binding-cells = <0>;
                bindings = < &sl AL2U >;
            };
    };

    macros {
        ws_find: ws_find {
            compatible = "zmk,behavior-macro";
            label = "ws_find_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
        };
        prettier: prettier {
            compatible = "zmk,behavior-macro";
            label = "prettier_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>;
        };
    };
   
    
    keymap {
         compatible = "zmk,keymap";

         AL1 {
         label = "Base";
                        bindings = <
   &none  &kp ESC  &hm_l LCTL L &hm_l LALT G &hm_l LGUI D  &none                                &none   &hm_r RGUI H  &hm_r LALT U  &hm_r RCTL C  &kp BSPC  &none
   &none  &hl_l NUM A  &hl_l SM2 R  &hl_l SM1 S  &hl_l SYS T  &none                             &none   &hl_r SYS N  &hl_r SM1 E  &hl_r SM2 I  &hl_r NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none 
   &none  &mt LC(LS(LALT)) SPC  &shrep LSHIFT 0                                                 &caps_alpha2macro  &alpha2macro &none
                        >;
                };

          AL2 {
          label = "Al2";
                         bindings = <
    &none  &kp ESC  &kp V  &kp W   &kp P   &none                                 &none   &kp M   &kp J   &kp F &kp BSPC   &none
    &none  &kp Q  &kp Z &kp X     &kp B    &none                                 &none   &kp K   &kp SQT &kp Y   &kp DOT  &none
    &none  &none   &none   &none   &none   &none                                 &none   &none   &none   &none  &none  &none
    &none  &sr LSHIFT AL1      &none                                             &none    &sl AL2U  &none
                         >;
               };
                
         SM1 {
         label = "Code";
                        bindings = <
   &none  &kp ESC   &kp STAR     &kp LS(N3)  &kp DLLR  &none                                 &none   &kp LS(COMMA)  &kp LS(DOT)  &kp MINUS  &kp BSPC   &none
   &none  &kp BSLH   &kp GRAVE    &kp TILDE   &kp CARET  &none                               &none   &kp LBKT       &kp RBKT     &kp PIPE   &kp SLASH  &none
   &none  &none   &none   &none   &none   &none                                              &none   &none          &none        &none      &none      &none
   &none  &trans      &trans                                                                 &trans  &trans  &none
                        >;
                };
        
         SM2 {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };
                
         NUM {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };

         SYS {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };

        AL2U {
                        bindings = <
   &none  &kp ESC    &mt LCTL L   &mt LALT G  &mt LGUI D  &none                                 &none   &mt RGUI H  &mt LALT U   &mt RCTL C  &kp BSPC   &none
   &none  &lt NUM A  &lt SM2 R    &lt SM1 S   &lt SYS T   &none                                 &none   &lt SYS N   &lt SM1 E    &lt SM2 I   &lt NUM O  &none
   &none  &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  &none
   &none  &mt LC(LS(LALT)) SPC  &sk LSHIFT                                                      &kp RET &kp BSPC &none
                        >;
                };
        };
};
